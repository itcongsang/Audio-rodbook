{"version":3,"file":"static/webpack/static/development/pages/index.js.98f82a548d605961308c.hot-update.js","sources":["webpack:///./services/book.service.ts"],"sourcesContent":["import { collection, doc, collectionChanges, fromCollectionRef, fromDocRef } from 'rxfire/firestore';\nimport { map, switchMap, mergeMap, mergeAll, combineAll } from 'rxjs/operators';\n\nimport { db } from './firebase.service';\nimport { Book } from 'models/book';\nimport { Channel } from 'models/channel';\nimport { of, BehaviorSubject, combineLatest, from, merge } from 'rxjs';\nimport { uniq } from 'lodash';\n\nclass BookAndChannel extends Book {\n  channelName:string;\n  constructor(data: any = {}) {\n    super(data);\n    this.channelName = data.channelName || '';\n  }\n}\n\nfunction getAllBooks() {\n  let res= collection(db.collection('books').limit(12)).pipe(\n    switchMap(snapshot =>\n      snapshot.map(doc0 => {\n        const rsd= new Book(doc0.data());\n        return combineLatest(of(rsd), GetChanelName(doc0.data())).pipe(\n          map(val=>{\n            let ob=new BookAndChannel({books: val[0], nameChannel: val[1][0]})\n            return ob;\n          })\n        )\n      }),\n    ), map(val=>{return val})\n  );\n  return res;\n}\n\nfunction GetChanelName(object){\n  let rs= new Book(object);\n  let channelId = rs.channelId;\n  let res= collection(db.collection('channels').where('channelId', '==', channelId)).pipe(\n    map(res => res.map(doc1 => {\n      let resChennel = new Channel(doc1.data());\n      return resChennel.name;\n    }))\n  );\n  return res;\n}\n\n\nfunction getAllBooks2() {\n  return collection(db.collection('books').limit(12)).pipe(\n    switchMap(books => {\n      const channelIds = uniq(books.map(v => v.data()['channelId']));\n      console.log('id ', channelIds)\n      return combineLatest(\n        of(books),\n        combineLatest(\n          channelIds.map(channelId =>\n            collection(db.collection('channels').where('channelId', '==', channelId)).pipe(map(v => v[0]))\n          )\n        )\n      );\n    }),\n    map(([books, channels]) => {\n      \n      return books.map(book => {\n        const bookDoc = book.data();\n        const channel = (channels.find(o => o.data().channelId === bookDoc.channelId));\n        console.log('channel ', channel);\n\n        return new BookAndChannel({\n          ...bookDoc,\n          channelName: typeof channel === 'object' ? channel.data().name : '',\n        });\n      });\n    })\n  );\n}\n\nexport { getAllBooks, getAllBooks2 };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;AANA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AATA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}