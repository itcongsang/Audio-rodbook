{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport { collection, doc } from 'rxfire/firestore';\nimport { map, switchMap, combineLatest } from 'rxjs/operators';\nimport { db } from \"./firebase.service\";\nimport { Book } from \"../models/book\";\nimport { Channel } from \"../models/channel\";\nimport { of } from 'rxjs';\n\nvar BookAndChannel = function BookAndChannel() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _classCallCheck(this, BookAndChannel);\n\n  this.books = data.books || null;\n  this.nameChannel = data.nameChannel || '';\n};\n\nfunction getAllBooks() {\n  var res = collection(db.collection('books').limit(12)).pipe(map(function (snapshot) {\n    return snapshot.map(function (doc0) {\n      console.log(doc0.data());\n      var rs = new Book(doc0.data());\n      ;\n      var channelId = rs.channelId;\n      return new BookAndChannel({\n        books: doc0.data(),\n        nameChannel: GetChanelName(channelId)\n      }); // let books = doc0.data();\n      // let channelId = books.channelId;\n      // return collection(db.collection('channels').where('channelId', '==', channelId)).pipe(\n      //   map(res => res.map(doc1 => {\n      //     let resChennel = new Channel(doc1.data());\n      //     let nameCN = resChennel.name;\n      //     let rs = new BookAndChannel({ books: books, nameChannel: nameCN });\n      //     return rs;\n      //   }))\n      // );\n    });\n  }));\n  console.log(res);\n  return res;\n}\n\nfunction GetChanelName(e) {\n  var namechanel = '';\n  collection(db.collection('channels').where('channelId', '==', e)).pipe(map(function (res) {\n    return res.map(function (doc1) {\n      var resChennel = new Channel(doc1.data());\n      namechanel = resChennel.name;\n    });\n  }));\n  return namechanel;\n}\n\nfunction getAllBooks2() {\n  //console.log('function 2')\n  return collection(db.collection('books').limit(12)).pipe(switchMap(function (books) {\n    var channelIds = books.map(function (v) {\n      return v.data()['channelId'];\n    });\n    console.log('log 1 ' + channelIds[0]);\n    return combineLatest(of(books), combineLatest(channelIds.map(function (channelId) {\n      console.log('log 2 ' + channelId);\n      doc(db.collection('channels').doc(channelId)).pipe(map(function (v) {\n        console.log('log 3 ' + v);\n        return v.data()['name'];\n      }));\n    })));\n  }));\n}\n\nexport { getAllBooks, getAllBooks2 };","map":{"version":3,"sources":["D:/SolutionReactJs/SourceDefault/audio-rodbook/services/book.service.ts"],"names":["collection","doc","map","switchMap","combineLatest","db","Book","Channel","of","BookAndChannel","data","books","nameChannel","getAllBooks","res","limit","pipe","snapshot","doc0","console","log","rs","channelId","GetChanelName","e","namechanel","where","doc1","resChennel","name","getAllBooks2","channelIds","v"],"mappings":"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","sourcesContent":["import { collection, doc, collectionChanges, fromCollectionRef, fromDocRef } from 'rxfire/firestore';\r\nimport { map, switchMap, combineLatest } from 'rxjs/operators';\r\n\r\nimport { db } from './firebase.service';\r\nimport { Book } from 'models/book';\r\nimport { Channel } from 'models/channel';\r\nimport { of } from 'rxjs';\r\n\r\nclass BookAndChannel {\r\n  books: Book;\r\n  nameChannel: string;\r\n  constructor(data: any = {}) {\r\n    this.books = data.books || null;\r\n    this.nameChannel = data.nameChannel || '';\r\n  }\r\n}\r\n\r\nfunction getAllBooks() {\r\n  let res= collection(db.collection('books').limit(12)).pipe(\r\n    map(snapshot =>\r\n      snapshot.map(doc0 => {\r\n        console.log(doc0.data())\r\n\r\n        let rs= new Book(doc0.data());;\r\n        let channelId = rs.channelId;\r\n        return new BookAndChannel({ books: doc0.data(), nameChannel: GetChanelName(channelId) });\r\n\r\n        // let books = doc0.data();\r\n        // let channelId = books.channelId;\r\n        // return collection(db.collection('channels').where('channelId', '==', channelId)).pipe(\r\n        //   map(res => res.map(doc1 => {\r\n        //     let resChennel = new Channel(doc1.data());\r\n        //     let nameCN = resChennel.name;\r\n        //     let rs = new BookAndChannel({ books: books, nameChannel: nameCN });\r\n        //     return rs;\r\n        //   }))\r\n        // );\r\n      })\r\n    )\r\n  );\r\n  console.log(res)\r\n  return res;\r\n}\r\n\r\nfunction GetChanelName(e){\r\n  let namechanel='';\r\n  collection(db.collection('channels').where('channelId', '==', e)).pipe(\r\n    map(res => res.map(doc1 => {\r\n      let resChennel = new Channel(doc1.data());\r\n      namechanel = resChennel.name;\r\n    }))\r\n  );\r\n  return namechanel;\r\n}\r\n\r\n\r\nfunction getAllBooks2() {\r\n  //console.log('function 2')\r\n  return collection(db.collection('books').limit(12)).pipe(\r\n    switchMap(books => {\r\n      const channelIds = books.map(v => v.data()['channelId']);\r\n      console.log('log 1 ' + channelIds[0])\r\n      return combineLatest(of(books), combineLatest(channelIds.map(channelId => {\r\n        console.log('log 2 ' + channelId)\r\n        doc(db.collection('channels').doc(channelId)).pipe(map(v => {\r\n          console.log('log 3 ' + v);\r\n          return v.data()['name'];\r\n        }))\r\n      })))\r\n    }),\r\n\r\n  );\r\n}\r\n\r\nexport { getAllBooks, getAllBooks2 };\r\n"]},"metadata":{},"sourceType":"module"}